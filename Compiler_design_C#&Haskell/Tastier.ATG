COMPILER Tastier

/*
  First, let's declare all the types we're going to use.
*/  
  enum TastierType : int {   // types for variables
    Undefined,
    Integer,
    Boolean,
    String
  };

  enum TastierKind : int {  // kinds of symbol
    Constant,
    Var,
    Proc,
    Array,
    Struct
  };

/*
  You'll notice some type aliases, such as the one just below, are commented
  out. This is because C# only allows using-alias-directives outside of a
  class, while class-inheritance directives are allowed inside. So the
  snippet immediately below is illegal in here. To complicate matters
  further, the C# runtime does not properly handle class-inheritance
  directives for Tuples (it forces you to write some useless methods). For
  these reasons, the type aliases which alias Tuples can be found in
  Parser.frame, but they're documented in this file, with the rest.
*/

  //using Symbol = System.Tuple<string, int, int, int, int>;

/*
  A Symbol is a name with a type and a kind. The first int in the
  tuple is the kind, and the second int is the type. We'll use these to
  represent declared names in the program.

  For each Symbol which is a variable, we have to allocate some storage, so
  the variable lives at some address in memory. The address of a variable on
  the stack at runtime has two components. The first component is which
  stack frame it's in, relative to the current procedure. If the variable is
  declared in the procedure that's currently executing, then it will be in
  that procedure's stack frame. If it's declared in the procedure that
  called the currently active one, then it'll be in the caller's stack
  frame, and so on. The first component is the offset that says how many
  frames up the chain of procedure calls to look for the variable. The
  second component is simply the location of the variable in the stack frame
  where it lives.

  The third int in the symbol is the stack frame on which the variable
  lives, and the fourth int is the index in that stack frame. Since
  variables which are declared in the global scope aren't inside any
  function, they don't have a stack frame to go into. In this compiler, our
  convention is to put these variables at an address in the data memory. If
  the variable was declared in the global scope, the fourth field in the
  Symbol will be zero, and we know that the next field is an address in
  global memory, not on the stack.

  Procedures, on the other hand, are just sets of instructions. A procedure
  is not data, so it isn't stored on the stack or in memory, but is just a
  particular part of the list of instructions in the program being run. If
  the symbol is the name of a procedure, we'll store a -1 in the address
  field (5).

  When the program is being run, the code will be loaded into the machine's
  instruction memory, and the procedure will have an address there. However,
  it's easier for us to just give the procedure a unique label, instead of
  remembering what address it lives at. The assembler will take care of
  converting the label into an address when it encounters a JMP, FJMP or
  CALL instruction with that label as a target.

  To summarize:
    * Symbol.Item1 -> name
    * Symbol.Item2 -> kind
    * Symbol.Item3 -> type
    * Symbol.Item4 -> stack frame pointer
    * Symbol.Item5 -> variable's address in the stack frame pointed to by
                      Item4, -1 if procedure
*/

  class Scope : Stack<Symbol> {}

/*
  A scope contains a stack of symbol definitions. Every time we come across
  a new local variable declaration, we can just push it onto the stack. We'll
  use the position of the variable in the stack to represent its address in
  the stack frame of the procedure in which it is defined. In other words, the
  variable at the bottom of the stack goes at location 0 in the stack frame,
  the next variable at location 1, and so on.
*/

  //using Instruction = Tuple<string, string>;
  class Program : List<Instruction> {}

/*
  A program is just a list of instructions. When the program is loaded into
  the machine's instruction memory, the instructions will be laid out in the
  same order that they appear in this list. Because of this, we can use the
  location of an instruction in the list as its address in instruction memory.
  Labels are just names for particular locations in the list of instructions
  that make up the program.

  The first component of all instructions is a label, which can be empty.
  The second component is the actual instruction itself.

  To summarize:
    * Instruction.Item1 -> label
    * Instruction.Item2 -> the actual instruction, as a string
*/

Stack<Scope> openScopes = new Stack<Scope>();
Scope externalDeclarations = new Scope();

/*
  Every time we encounter a new procedure declaration in the program, we want
  to make sure that expressions inside the procedure see all of the variables
  that were in scope at the point where the procedure was defined. We also
  want to make sure that expressions outside the procedure do not see the
  procedure's local variables. Every time we encounter a procedure, we'll push
  a new scope on the stack of open scopes. When the procedure ends, we can pop
  it off and continue, knowing that the local variables defined in the
  procedure cannot be seen outside, since we've popped the scope which
  contains them off the stack.
*/

Program program = new Program();
Program header = new Program();

/* List to store sets of update actions for nested for loops.
   Using this data structure will ensure that update actions are carried out for their
   respective for loops after the contents (Stat) of the for loop.
*/
List<Program> updateOps = new List<Program>();

/* Global variables used to track storage space in Memory.
   Specifically to account for the variable amount of memory
   used to store strings. 
*/ 
/* stringOffset keeps track of the total offset, caused by storing strings of variable
   length in memory, used to store variables  and constants in data memory,
   this prevents any unintentional memory overwrites from occuring.
*/
int stringOffset = 4092;
int globalCount = 0;
int structArrays = 4096;
bool arraySto = false;


/* arrayDict keeps track of the dimensions of declared arrays.
   It uses the Symbol address for the array as the dictionary key, and
   a list of ints (each dimensions length) as the value.
*/
Dictionary<int, List<int>> arrayDict = new Dictionary<int, List<int>>();

/* paramDict keeps track of declared procedures and their associated parameters.
   It does this by using the procedure's name as the dictionary key, and a list of
   Symbols (created for the parameters) as the value.
*/
Dictionary<string, List<Symbol>> paramDict = new Dictionary<string, List<Symbol>>();

/* structDict keeps track of declared structures by having a key-value pair referenced
   by the structers name, and a value of the list of symbols that represent the 
   attributes of that structure.
*/
Dictionary<string, List<Symbol>> structDict = new Dictionary<string, List<Symbol>>();

/* structInstDict keeps track of the relevant information for individual instances of
   a dictionary, using the instances address as a key.
*/
Dictionary<int, List<Symbol>> structInstDict = new Dictionary<int, List<Symbol>>();

Stack<string> openProcedureDeclarations = new Stack<string>();

/*
  In order to implement the "shadowing" of global procedures by local procedures
  properly, we need to generate a label for local procedures that is different
  from the label given to procedures of the same name in outer scopes. See the
  test case program "procedure-label-shadowing.TAS" for an example of why this
  is important. In order to make labels unique, when we encounter a non-global
  procedure declaration called "foo" (for example), we'll give it the label
  "enclosingProcedureName$foo" for all enclosing procedures. So if it's at
  nesting level 2, it'll get the label "outermost$nextoutermost$foo". Let's
  make a function that does this label generation given the set of open
  procedures which enclose some new procedure name.
*/

string generateProcedureName(string name) {
  if (openProcedureDeclarations.Count == 0) {
    return name;
  } else {
    string temp = name;
    foreach (string s in openProcedureDeclarations) {
      temp = s + "$" + temp;
    }
    return temp;
  }
}

/*
  We also need a function that figures out, when we call a procedure from some
  scope, what label to call. This is where we actually implement the shadowing;
  the innermost procedure with that name should be called, so we have to figure
  out what the label for that procedure is.
*/

string getLabelForProcedureName(int lexicalLevelDifference, string name) {
  /*
     We want to skip <lexicalLevelDifference> labels backwards, but compose
     a label that incorporates the names of all the enclosing procedures up
     to that point. A lexical level difference of zero indicates a procedure
     defined in the current scope; a difference of 1 indicates a procedure
     defined in the enclosing scope, and so on.
  */
  int numOpenProcedures = openProcedureDeclarations.Count;
  int numNamesToUse = (numOpenProcedures - lexicalLevelDifference);
  string theLabel = name;

  /*
    We need to concatenate the first <numNamesToUse> labels with a "$" to
    get the name of the label we need to call.
  */

  var names = openProcedureDeclarations.Take(numNamesToUse);

  foreach (string s in names) {
      theLabel = s + "$" + theLabel;
  }

  return theLabel;
}

Stack<string> openLabels = new Stack<string>();
int labelSeed = 0;

string generateLabel() {
  return "L$"+labelSeed++;
}

/*
  Sometimes, we need to jump over a block of code which we're about to
  generate (for example, at the start of a loop, if the test fails, we have
  to jump to the end of the loop). Because it hasn't been generated yet, we
  don't know how long it will be (in the case of the loop, we don't know how
  many instructions will be in the loop body until we actually generate the
  code, and count them). In this case, we can make up a new label for "the
  end of the loop" and emit a jump to that label. When we get to the end of
  the loop, we can put the label in, so that the jump will go to the
  labelled location. Since we can have loops within loops, we need to keep
  track of which label is the one that we are currently trying to jump to,
  and we need to make sure they go in the right order. We'll use a stack to
  store the labels for all of the forward jumps which are active. Every time
  we need to do a forward jump, we'll generate a label, emit a jump to that
  label, and push it on the stack. When we get to the end of the loop, we'll
  put the label in, and pop it off the stack.
*/

Symbol _lookup(Scope scope, string name) {
  foreach (Symbol s in scope) {
      if (s.Item1 == name) {
        return s;
      }
  }
  return null;
}

Symbol lookup(Stack<Scope> scopes, string name) {
  int stackFrameOffset = 0;
  int variableOffset = 0;

  foreach (Scope scope in scopes) {
    foreach (Symbol s in scope) {
      if (s.Item1 == name) {
        return s;
      }
      else {
        variableOffset += 1;
      }
    }
    stackFrameOffset += 1;
    variableOffset = 0;
  }
  return null; // if the name wasn't found in any open scopes.
}

/* findAddr computes the number of variables currently in scope.
   The result is used to give local strings an address in data memory.
*/
int findAddr(Stack<Scope> scopes) {
  int count = 0;
  foreach (Scope scope in scopes) {
    foreach (Symbol s in scope) {
      if (s.Item3 == (int)TastierType.String || s.Item4 == 0) {
        count++;
      }
    }
  }
  return count;
}

/* Accesses designated memory space (4093), generates assembly instuctions
   that compare the index being accessed with the boundries of the array.
   Halts execution of the program, and outputs a relevant error message if the
   index is out of bounds.
*/
void arrayBounds(int arrSize)
{
    program.Add(new Instruction("", "StoG " + 4093));
    program.Add(new Instruction("", "LoadG " + 4093));
    
    program.Add(new Instruction("", "Const " + arrSize));
    program.Add(new Instruction("", "Gte"));
    
    openLabels.Push(generateLabel());
    
    program.Add(new Instruction("", "FJmp " + openLabels.Peek()));
    program.Add(new Instruction("", "MemErr"));
    program.Add(new Instruction(openLabels.Pop(), "Nop"));
    
    program.Add(new Instruction("", "LoadG " + 4093));
}

/*
  You may notice that when we use a LoadG or StoG instruction, we add 3 to
  the address of the item being loaded or stored. This is because the
  control and status registers of the machine are mapped in at addresses 0,
  1, and 2 in data memory, so we cannot use those locations for storing
  variables. If you want to load rtp, rbp, or rpc onto the stack to
  manipulate them, you can LoadG and StoG to those locations.
*/

/*--------------------------------------------------------------------------*/

CHARACTERS
letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  special_char = "!£$%^&*)(_-=+][}{@;:/?.>,<#~¬".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  white_space = ' '.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  str    = '"'{letter | white_space | digit | special_char}'"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

/*------------------------------------------------------------------------*/

AddOp<out Instruction inst>
=                               (.  inst = new Instruction("", "Add"); .)
  ( '+'
  | '-'                         (.  inst = new Instruction("", "Sub"); .)
  ).

/*------------------------------------------------------------------------*/

Str<Symbol sym, out TastierType type> (. string sval; .)
= str                           (.
                                    sval = (t.val).Replace("\"", "");

                                    // store pointer to string in memory.
                                    program.Add(new Instruction("", "Const " + (stringOffset)));
                                    if (sym.Item2 == (int)TastierKind.Array || sym.Item2 == (int)TastierKind.Struct)
                                    {
                                        program.Add(new Instruction("", "StoArr"));
                                    }
                                    else
                                    {
                                        program.Add(new Instruction("", "StoG " + (sym.Item5+3)));
                                    }
                                    // store string's length prior to the actual string.
                                    program.Add(new Instruction("", "Const " + sval.Length));
                                    program.Add(new Instruction("", "StoG " + (stringOffset)));
                                    
                                    stringOffset--;
                                    // store the string character by character in dmem.
                                    foreach (char c in sval)
                                    {
                                        int c_int = (int)c;
                                        program.Add(new Instruction("", "Const " + c_int));
                                        program.Add(new Instruction("", "StoG " + (stringOffset)));
                                        stringOffset--;
                                    }
                                    
                                    type = TastierType.String;
                                .).

/*------------------------------------------------------------------------*/

Expr<out TastierType type>      (.  TastierType type1; Instruction inst; .)
= SimExpr<out type>
  [ RelOp<out inst>
    SimExpr<out type1>          (.
                                    if (type != type1) {
                                      SemErr("incompatible types");
                                    }
                                    else {
                                      program.Add(inst);
                                      type = TastierType.Boolean;
                                    }
                                .)
  ].

/*------------------------------------------------------------------------*/

Factor<out TastierType type>    (. int index = -1; int i = 0; List<int> dList = new List<int>();; int n; Symbol sym; string name; string name1; List<Symbol> syms = new List<Symbol>(); int counter = 0; .)
=                               (. type = TastierType.Undefined; .)
  ( Ident<out name>             (. sym = lookup(openScopes, name); .) 
    ['.' Ident<out name1>       (. if (sym.Item2 != (int)TastierKind.Struct)
                                   {
                                     SemErr("expected struct");
                                   }
                                   else
                                   {
                                     if (!structInstDict.TryGetValue(sym.Item5, out syms)) 
                                     {
                                       SemErr("instance of struct "+name+" does not exist");
                                     } 
                                     for (int k = 0; k < syms.Count; k++)
                                     {
                                        if ((syms[k].Item1) == name1)
                                        {
                                          index = k;
                                        }
                                     }
                                     if (index != -1)
                                     {
                                        program.Add(new Instruction("", "LoadG " + (sym.Item5+3)));                                        
                                        program.Add(new Instruction("", "Const " + index));
                                        program.Add(new Instruction("", "Sub"));
                                     }
                                     else
                                     {
                                        SemErr("attribute '"+name1+"' does not exist");
                                     }
                                   }
                                 .)
    ]
    ['['                        (.  
                                    if (index >= 0)
                                    {
                                        if ((syms[index].Item2) == (int)TastierKind.Array)
                                        {
                                            program.Add(new Instruction("", "LoadArr"));
                                        }
                                        else
                                        {
                                            program.Add(new Instruction("", "LoadG " + (sym.Item5+3))); 
                                        }
                                    }
                                    else
                                    {
                                        program.Add(new Instruction("", "LoadG " + (sym.Item5+3)));
                                    }
                                .)
        Expr<out type>          (.
                                  if (sym.Item2 == (int)TastierKind.Struct)
                                  {
                                    if (syms[index].Item2 != (int)TastierKind.Array)
                                    {
                                      SemErr("can only index arrays");
                                    }
                                    dList = arrayDict[syms[index].Item5];
                                  }  
                                  else if (sym.Item2 == (int)TastierKind.Array)
                                  {
                                    dList = arrayDict[sym.Item5];
                                  }
                                  else
                                  {
                                    SemErr("can only index arrays");
                                  }
                                  i++;   
                                  counter = dList[0];                            
                                .)']'
    {'['                        (. program.Add(new Instruction("", "Const " + dList[i]));
                                   program.Add(new Instruction("", "Mul"));
                                   counter = counter * dList[i];  
                                .)
        Expr<out type>          (.
                                  program.Add(new Instruction("", "Add"));
                                  i++;
                                .)']'}(. arrayBounds(counter);
                                         program.Add(new Instruction("", "Sub"));.)
                                ]
                                (.
                                    bool isExternal = false; //CS3071 students can ignore external declarations, since they only deal with compilation of single files.
                                    if (sym == null) {
                                      sym = _lookup(externalDeclarations, name);
                                      isExternal = true;
                                    }

                                    if (sym == null) {
                                      SemErr("reference to undefined variable " + name);
                                    }
                                    else {
                                      /* When loading a variable/constant from dmem, the appropriate offset is applied
                                         to index the correct address in memory.
                                      */
                                      if (sym.Item2 == (int)TastierKind.Struct)
                                      {
                                        type = (TastierType)syms[index].Item3;
                                      }
                                      else
                                      {
                                        type = (TastierType)sym.Item3;
                                      }
                                      if (((TastierKind)sym.Item2 == TastierKind.Var) || ((TastierKind)sym.Item2 == TastierKind.Constant) || ((TastierKind)sym.Item2 == TastierKind.Array) || ((TastierKind)sym.Item2 == TastierKind.Struct)) {
                                        if (sym.Item4 == 0 || sym.Item3 == (int)TastierType.String) {
                                            int offset; 
                                            offset = sym.Item5+3;
                                            if (isExternal) {
                                              program.Add(new Instruction("", "LoadG " + sym.Item1));
                                              // if the symbol is external, we load it by name. The linker will resolve the name to an address.
                                            } else if ((sym.Item2 != (int)TastierKind.Array && sym.Item2 != (int)TastierKind.Struct) || (arraySto)){
                                              program.Add(new Instruction("", "LoadG " + (offset)));
                                            } else {
                                              program.Add(new Instruction("", "LoadArr"));
                                            }
                                        } else {
                                            int lexicalLevelDifference = Math.Abs(openScopes.Count - sym.Item4)-1;
                                            program.Add(new Instruction("", "Load " + lexicalLevelDifference + " " + sym.Item5));
                                        }
                                      } else SemErr("variable or constant expected");
                                    }
                                .)
  | number                      (.
                                    n = Convert.ToInt32(t.val);
                                    program.Add(new Instruction("", "Const " + n));
                                    type = TastierType.Integer;
                                .)
  | '-'
    Factor<out type>            (.
                                    if (type != TastierType.Integer) {
                                      SemErr("integer type expected");
                                      type = TastierType.Integer;
                                    }
                                    program.Add(new Instruction("", "Neg"));
                                    program.Add(new Instruction("", "Const 1"));
                                    program.Add(new Instruction("", "Add"));
                                .)
  | "true"                      (.  program.Add(new Instruction("", "Const " + 1)); type = TastierType.Boolean; .)
  | "false"                     (.  program.Add(new Instruction("", "Const " + 0)); type = TastierType.Boolean; .)
  ).

/*------------------------------------------------------------------------*/

Ident<out string name>
= ident                         (.  name = t.val; .).

/*------------------------------------------------------------------------*/

MulOp<out Instruction inst>
=                               (.  inst = new Instruction("", "Mul"); .)
  ( '*'
  | '/'                         (.  inst = new Instruction("", "Div"); .)
  ).

/*------------------------------------------------------------------------*/

Parameters<string name>         (. string name1; string name2; TastierType type; Scope currentScope = openScopes.Peek(); Symbol sym; List<Symbol> syms = new List<Symbol>(); List<int> dims = new List<int>(); List<Symbol> attr = new List<Symbol>(); .)
= '(' 
   [("struct"
     Ident<out name2>
     Ident<out name1>           (. sym = new Symbol(name1, (int)TastierKind.Struct, (int)TastierType.Undefined, 0, globalCount); 
                                   if(!structDict.TryGetValue(name2, out attr))
                                   {
                                     SemErr("instance of struct blah "+name1+" does not exist");
                                   }
                                   structInstDict.Add(sym.Item5, attr);
                                .)
    |Type<out type>
    Ident<out name1>            (. sym = new Symbol(name1, (int)TastierKind.Var, (int)type, 0, globalCount); .)
    ['['number                  (. sym = new Symbol(name1, (int)TastierKind.Array, (int)type, 0, globalCount); 
                                   dims.Add(Convert.ToInt32(t.val)); 
                                .)
     ']'
      {'['number                (. dims.Add(Convert.ToInt32(t.val)); .)']'}
                                (. arrayDict.Add(sym.Item5, dims); .)])
                                (. 
                                   currentScope.Push(sym);
                                   syms.Add(sym);      
                                   globalCount++; 
                                .)
   { ','("struct"
         Ident<out name2>
         Ident<out name1>       (. sym = new Symbol(name1, (int)TastierKind.Struct, (int)TastierType.Undefined, 0, globalCount); 
                                   if(!structDict.TryGetValue(name2, out attr))
                                   {
                                     SemErr("instance of struct blah "+name1+" does not exist");
                                   }
                                   structInstDict.Add(sym.Item5, attr);
                                .)
        |Type<out type>
        Ident<out name1>        (. sym = new Symbol(name1, (int)TastierKind.Var, (int)type, 0, globalCount); .)
     ['['number                 (. sym = new Symbol(name1, (int)TastierKind.Array, (int)type, 0, globalCount); 
                                   dims.Add(Convert.ToInt32(t.val)); 
                                .)
      ']'
      {'['number                (. dims.Add(Convert.ToInt32(t.val)); .)']'}
                                (. arrayDict.Add(sym.Item5, dims); .)])
                                (.
                                    currentScope.Push(sym);
                                    syms.Add(sym);      
                                    globalCount++;
                                .)
   }]
  ')'                           (.
                                    paramDict.Add(name, syms);
                                .)
  .

/*------------------------------------------------------------------------*/

ProcDecl                        (.  string name; string label; Scope currentScope = openScopes.Peek(); int enterInstLocation = 0; bool external = false; .)
= "void"
  Ident<out name>               (.
                                    Console.WriteLine("Process: " + name);
                                    currentScope.Push(new Symbol(name, (int)TastierKind.Proc, (int)TastierType.Undefined, openScopes.Count, -1));
                                    openScopes.Push(new Scope());
                                    currentScope = openScopes.Peek();
                                    label = generateProcedureName(name);
                                    openProcedureDeclarations.Push(name);
                                .)
  Parameters<label>
  '{'                           (.
                                    program.Add(new Instruction("", "Enter 0"));
                                    enterInstLocation = program.Count - 1;
                                    
                                    /*
                                      Enter is supposed to have as an
                                      argument the next free address on the
                                      stack, but until we know how many
                                      local variables are in this procedure,
                                      we don't know what that is. We'll keep
                                      track of where we put the Enter
                                      instruction in the program so that
                                      later, when we know how many spaces on
                                      the stack have been allocated, we can
                                      put the right value in.
                                    */
                                .)

  { StructInst | VarDecl<external> | Stat |  (.
                                                openLabels.Push(generateLabel());
                                                program.Add(new Instruction("", "Jmp " + openLabels.Peek()));
                                                /*
                                                  We need to jump over procedure
                                                  definitions because otherwise we'll
                                                  execute all the code inside them!
                                                  Procedures should only be entered via
                                                  a Call instruction.
                                                */
                                             .)
    ProcDecl                    (. program.Add(new Instruction(openLabels.Pop(), "Nop")); .)
  }
  '}'                           (.
                                    program.Add(new Instruction("", "Leave"));
                                    program.Add(new Instruction("", "Ret"));
                                    openScopes.Pop();
                                    // now we can generate the Enter instruction properly
                                    program[enterInstLocation] =
                                      new Instruction(label, "Enter " +
                                                      currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Array) || (s.Item2 == (int)TastierKind.Struct) ));
                                    openProcedureDeclarations.Pop();
                                .).

/*------------------------------------------------------------------------*/

RelOp<out Instruction inst>
=                               (.  inst = new Instruction("", "Equ"); .)
  ( '='
  | '<'                         (.  inst = new Instruction("", "Lss"); .)
  | '>'                         (.  inst = new Instruction("", "Gtr"); .)
  | "!="                        (.  inst = new Instruction("", "Neq"); .)
  | "<="                        (.  inst = new Instruction("", "Lse"); .)
  | ">="                        (.  inst = new Instruction("", "Gte"); .)
  ).

/*------------------------------------------------------------------------*/

SimExpr<out TastierType type>   (.  TastierType type1; Instruction inst; .)
= Term<out type>
  { AddOp<out inst>
    Term<out type1>             (.
                                    if (type != TastierType.Integer || type1 != TastierType.Integer) {
                                      SemErr("integer type expected");
                                    }
                                    program.Add(inst);
                                .)
  }.

/*------------------------------------------------------------------------*/

SwitchExpr<out TastierType type>      (. Program snapshot = program; program = new Program(); .)
= Expr<out type>                      (.
                                        updateOps.Add(program);
                                        program = snapshot;
                                      .). 

/*------------------------------------------------------------------------*/

InitialLoopAction                     (.  string name; Symbol sym; TastierType type; bool isExternal = false; .) 

= Ident<out name>                     (.
                                        sym = lookup(openScopes, name);
                                        if (sym == null) {
                                          sym = _lookup(externalDeclarations, name);
                                          isExternal = true;
                                        }
                                        if (sym == null) {
                                          SemErr("reference to undefined variable " + name);
                                        }
                                     .)
  
  (":="                                (.
                                        if ((sym.Item2 != (int)TastierKind.Var) && (sym.Item2 != (int)TastierKind.Array)) {
                                          SemErr("cannot assign to non-variable");
                                        }
                                     .)
  Expr<out type>                (.                                   
                                    if (type != (TastierType)sym.Item3) {
                                      SemErr("incompatible types");
                                    }
                                    if (sym.Item4 == 0) {
                                      if (isExternal) {
                                        program.Add(new Instruction("", "StoG " + sym.Item1));
                                        // if the symbol is external, we also store it by name. The linker will resolve the name to an address.
                                      } else {
                                        program.Add(new Instruction("", "StoG " + (sym.Item5+3)));
                                      }
                                    }
                                    else {
                                      int lexicalLevelDifference = Math.Abs(openScopes.Count - sym.Item4)-1;
                                      program.Add(new Instruction("", "Sto " + lexicalLevelDifference + " " + sym.Item5));
                                    }
                                .))';'.
  
  
                                   
  

/*------------------------------------------------------------------------*/

UpdateLoopAction                      (.  string name; Symbol sym; TastierType type; bool isExternal = false; Program snapshot = program; program = new Program(); .) 

= Ident<out name>                     (.
                                        sym = lookup(openScopes, name);
                                        if (sym == null) {
                                          sym = _lookup(externalDeclarations, name);
                                          isExternal = true;
                                        }
                                        if (sym == null) {
                                          SemErr("reference to undefined variable " + name);
                                        }
                                     .)
  
  (":="                                (.
                                        if ((sym.Item2 != (int)TastierKind.Var) && (sym.Item2 != (int)TastierKind.Array)) {
                                          SemErr("cannot assign to non-variable");
                                        }
                                     .)
  Expr<out type>                
  [ '?'      (.
                                    if ((TastierType)type != TastierType.Boolean) {
                                      SemErr("boolean type expected");
                                    }
                                    openLabels.Push(generateLabel());
                                    program.Add(new Instruction("", "FJmp " + openLabels.Peek()));
                                .)
       Expr<out type>           (.
                                    Instruction startOfElse = new Instruction(openLabels.Pop(), "Nop");
                                    /*
                                       If we got into the "if", we need to
                                       jump over the "else" so that it
                                       doesn't get executed.
                                    */
                                    openLabels.Push(generateLabel());
                                    program.Add(new Instruction("", "Jmp " + openLabels.Peek()));
                                    program.Add(startOfElse);
                                .)
       ':'
       Expr<out type>           (.
                                     program.Add(new Instruction(openLabels.Pop(), "Nop"));
                                .)
                      ]
                                  (.                                   
                                    if (type != (TastierType)sym.Item3) {
                                      SemErr("incompatible types");
                                    }
                                    if (sym.Item4 == 0) {
                                      if (isExternal) {
                                        program.Add(new Instruction("", "StoG " + sym.Item1));
                                        // if the symbol is external, we also store it by name. The linker will resolve the name to an address.
                                      } else {
                                        program.Add(new Instruction("", "StoG " + (sym.Item5+3)));
                                      }
                                    }
                                    else {
                                      int lexicalLevelDifference = Math.Abs(openScopes.Count - sym.Item4)-1;
                                      program.Add(new Instruction("", "Sto " + lexicalLevelDifference + " " + sym.Item5));
                                    }
                                .))';'(.
                                        updateOps.Add(program); // Add the new update operations to the list.
                                        program = snapshot; // Restore program to it's context prior to the update action.
                                      .).  
                                                         
                                
  
  
                                   
  

/*------------------------------------------------------------------------*/

Stat                            (.  int index = -1; int tmp = 0; int i = 0; List<int> dList = new List<int>(); TastierType type; TastierType type1; string name; string name1; List<Symbol> syms = new List<Symbol>(); Symbol sym; Symbol sym1; bool external = false; bool isExternal = false; int symCount = 0; int counter = 0; .)

= Ident<out name>               (.  
                                    sym = lookup(openScopes, name);
                                    if (sym == null) {
                                      sym = _lookup(externalDeclarations, name);
                                      isExternal = true;
                                    }
                                    if (sym == null) {
                                      SemErr("reference to undefined variable " + name);
                                    }
                                .)
['.' Ident<out name1>       (. if (sym.Item2 != (int)TastierKind.Struct)
                                   {
                                     SemErr("expected struct");
                                   }
                                   else
                                   {
                                     if (!structInstDict.TryGetValue(sym.Item5, out syms)) 
                                     {
                                       SemErr("instance of struct "+name+" does not exist");
                                     }
                                     index = -1;  
                                     for (int k = 0; k < syms.Count; k++)
                                     {
                                        if ((syms[k].Item1) == name1)
                                        {
                                          index = k;
                                          tmp = index;
                                        }
                                     }
                                     if (index != -1)
                                     {
                                        program.Add(new Instruction("", "LoadG " + (sym.Item5+3)));
                                        program.Add(new Instruction("", "Const " + index));
                                        program.Add(new Instruction("", "Sub"));
                                     }
                                     else
                                     {
                                        SemErr("attribute '"+name1+"' does not exist");
                                     }
                                   }
                                 .)
    ]
  ['['                          (.  
                                    if (index >= 0)
                                    {
                                        if ((syms[index].Item2) == (int)TastierKind.Array)
                                        {
                                            program.Add(new Instruction("", "LoadArr"));
                                        }
                                        else
                                        {
                                            program.Add(new Instruction("", "LoadG " + (sym.Item5+3))); 
                                        }
                                    }
                                    else
                                    {
                                        program.Add(new Instruction("", "LoadG " + (sym.Item5+3)));
                                    }
                                .)
      Expr<out type>            (.
                                  if (sym.Item2 == (int)TastierKind.Struct)
                                  {
                                    if (syms[index].Item2 != (int)TastierKind.Array)
                                    {
                                      SemErr("can only index arrays");
                                    }
                                    dList = arrayDict[syms[index].Item5];
                                  }  
                                  else if (sym.Item2 == (int)TastierKind.Array)
                                  {
                                    dList = arrayDict[sym.Item5];
                                  }
                                  else
                                  {
                                    SemErr("can only index arrays");
                                  }
                                  i++;
                                  counter = dList[0];                               
                                .)']'
  {'['                          (. 
                                   program.Add(new Instruction("", "Const " + dList[i]));
                                   program.Add(new Instruction("", "Mul"));
                                   counter = counter * dList[i];
                                .)
      Expr<out type>            (.
                                    program.Add(new Instruction("", "Add"));
                                    i++;
                                .)']'} (. arrayBounds(counter);
                                          program.Add(new Instruction("", "Sub")); .)
                                ]
  ( ":="                         (.
                                    if ((sym.Item2 != (int)TastierKind.Var) && (sym.Item2 != (int)TastierKind.Array) && (sym.Item2 != (int)TastierKind.Struct)) {
                                      SemErr("cannot assign to non-variable");
                                    }
                                .)
    (| Expr<out type> 
      [ '?'      (.
                                    if ((TastierType)type != TastierType.Boolean) {
                                      SemErr("boolean type expected");
                                    }
                                    openLabels.Push(generateLabel());
                                    program.Add(new Instruction("", "FJmp " + openLabels.Peek()));
                                .)
       Expr<out type>           (.
                                    Instruction startOfElse = new Instruction(openLabels.Pop(), "Nop");
                                    /*
                                       If we got into the "if", we need to
                                       jump over the "else" so that it
                                       doesn't get executed.
                                    */
                                    openLabels.Push(generateLabel());
                                    program.Add(new Instruction("", "Jmp " + openLabels.Peek()));
                                    program.Add(startOfElse);
                                .)
       ':'
       Expr<out type>           (.
                                     program.Add(new Instruction(openLabels.Pop(), "Nop"));
                                .)
                      ]
                                (.                                   
                                    if (type != (TastierType)sym.Item3 && type != (TastierType)syms[tmp].Item3) {
                                      SemErr("incompatible types");
                                    }
                                    if (sym.Item4 == 0) {
                                      if (isExternal) {
                                        program.Add(new Instruction("", "StoG " + sym.Item1));
                                        // if the symbol is external, we also store it by name. The linker will resolve the name to an address.
                                      } else if (sym.Item2 != (int)TastierKind.Array && sym.Item2 != (int)TastierKind.Struct) {
                                        program.Add(new Instruction("", "StoG " + (sym.Item5+3)));
                                      } else {
                                        program.Add(new Instruction("", "StoArr"));
                                      }
                                    }
                                    else {
                                      int lexicalLevelDifference = Math.Abs(openScopes.Count - sym.Item4)-1;
                                      program.Add(new Instruction("", "Sto " + lexicalLevelDifference + " " + sym.Item5));
                                    }
                                .)
    | Str<sym, out type>
                                 ) ';'
     
  | '('                         (. int lexicalLevelDifference = Math.Abs(openScopes.Count - sym.Item4); 
                                   string procedureLabel = getLabelForProcedureName(lexicalLevelDifference, sym.Item1);
                                .)
    [Ident<out name1>           (.
                                    syms = paramDict[procedureLabel];
                                    sym1 = lookup(openScopes, name1);
                                    if (sym1.Item3 != syms[symCount].Item3)
                                    {
                                        SemErr("Parameter type mismatch");
                                    }
                                    if (sym1.Item2 == (int)TastierKind.Array)
                                    {
                                      if (syms[symCount].Item2 == sym1.Item2)
                                      {
                                        if (arrayDict[syms[symCount].Item5].Count != arrayDict[sym1.Item5].Count)
                                        {
                                            SemErr("Parameter dimension mismatch");
                                        }
                                        for (int c = 0; c < arrayDict[sym1.Item5].Count; c++)
                                        {
                                          if ((arrayDict[syms[symCount].Item5])[c] != (arrayDict[sym1.Item5])[c])
                                          {
                                            SemErr("dimension length mismatch");
                                          }
                                        }
                                        program.Add(new Instruction("", "LoadG " + (sym1.Item5 + 3)));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));
                                      }
                                      else
                                      {
                                        SemErr("Parameter kind mismatch");
                                      }
                                    }
                                    else if (sym1.Item2 == (int)TastierKind.Struct)
                                    {
                                      if (syms[symCount].Item2 == sym1.Item2)
                                      {   
                                        structInstDict[syms[symCount].Item5] = structInstDict[sym1.Item5];
                                        program.Add(new Instruction("", "LoadG " + (sym1.Item5 + 3)));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));
                                      }
                                      else
                                      {
                                        SemErr("Parameter kind mismatch");
                                      }
                                    }
                                    else if (sym1.Item4 == 0 || sym1.Item3 == (int)TastierType.String)
                                    {
                                        program.Add(new Instruction("", "LoadG " + (sym1.Item5 + 3)));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));                                        
                                    }
                                    else
                                    {
                                        int paramLevelDifference = Math.Abs(openScopes.Count - sym1.Item4) -1;
                                        program.Add(new Instruction("", "Load " + paramLevelDifference + " " + sym1.Item5));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));
                                    }
                                    symCount++;
                                .)                   
     { ',' Ident<out name1>     (.   
                                    sym1 = lookup(openScopes, name1);
                                    if (sym1.Item3 != syms[symCount].Item3)
                                    {
                                        SemErr("Parameter type mismatch");
                                    }
                                    if (sym1.Item2 == (int)TastierKind.Array)
                                    {
                                      if (syms[symCount].Item2 == sym1.Item2)
                                      {
                                        if (arrayDict[syms[symCount].Item5].Count != arrayDict[sym1.Item5].Count)
                                        {
                                            SemErr("Parameter dimension mismatch");
                                        }
                                        for (int c = 0; c < arrayDict[sym1.Item5].Count; c++)
                                        {
                                          if ((arrayDict[syms[symCount].Item5])[c] != (arrayDict[sym1.Item5])[c])
                                          {
                                            SemErr("dimension length mismatch");
                                          }
                                        }
                                        program.Add(new Instruction("", "LoadG " + (sym1.Item5 + 3)));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));
                                      }
                                      else
                                      {
                                        SemErr("Parameter kind mismatch");
                                      }
                                    }
                                    else if (sym1.Item2 == (int)TastierKind.Struct)
                                    {
                                      if (syms[symCount].Item2 == sym1.Item2)
                                      {
                                        structInstDict[syms[symCount].Item5] = structInstDict[sym1.Item5];
                                        program.Add(new Instruction("", "LoadG " + (sym1.Item5 + 3)));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));
                                      }
                                      else
                                      {
                                        SemErr("Parameter kind mismatch");
                                      }
                                    }
                                    else if (sym1.Item4 == 0 || sym1.Item3 == (int)TastierType.String)
                                    {
                                        program.Add(new Instruction("", "LoadG " + (sym1.Item5 + 3)));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));                                        
                                    }
                                    else
                                    {
                                        int paramLevelDifference = Math.Abs(openScopes.Count - sym1.Item4) -1;
                                        program.Add(new Instruction("", "Load " + paramLevelDifference + " " + sym1.Item5));
                                        program.Add(new Instruction("", "StoG " + (syms[symCount].Item5 + 3)));
                                    }
                                    symCount++;
                                .)}]
    ')'                         (.
                                    if (symCount != syms.Count)
                                    {
                                        SemErr("incorrect number of paramters");
                                    }
                                .)
    ';'                         (.
                                    if ((TastierKind)sym.Item2 != TastierKind.Proc) {
                                      SemErr("object is not a procedure");
                                    }

                                    int currentStackLevel = openScopes.Count;
                                    program.Add(new Instruction("", "Call " + lexicalLevelDifference + " " + procedureLabel));
                                .)
  )
  
| "switch"      // breaks are built in for each case...
  '(' SwitchExpr<out type> ')''{'(. openLabels.Push(generateLabel()); .)
    {
      "case"Factor<out type1>':'(. if (type != type1) {
                                      SemErr("incompatible types");
                                    }
                                    if (updateOps.Count != 0){
                                      program.AddRange(updateOps[(updateOps.Count)-1]);
                                    }
                                    program.Add(new Instruction("", "Equ"));
                                .)
                                (.
                                    openLabels.Push(generateLabel());
                                    program.Add(new Instruction("", "FJmp " + openLabels.Peek()));
                                .)
        {Stat}                  (.
                                    Instruction startOfElse2 = new Instruction(openLabels.Pop(), "Nop");
                                   
                                    program.Add(new Instruction("", "Jmp " + openLabels.Peek()));
                                    program.Add(startOfElse2);
                                .)
    }
    "default:" {Stat}           (.
                                    program.Add(new Instruction(openLabels.Pop(), "Nop"));
                                    updateOps.RemoveAt((updateOps.Count)-1);
                                .)
    '}'
    
| "if"
  '(' Expr<out type> ')'        (.
                                    if ((TastierType)type != TastierType.Boolean) {
                                      SemErr("boolean type expected");
                                    }
                                    openLabels.Push(generateLabel());
                                    program.Add(new Instruction("", "FJmp " + openLabels.Peek()));
                                .)
      Stat                      (.
                                    Instruction startOfElse = new Instruction(openLabels.Pop(), "Nop");
                                    /*
                                       If we got into the "if", we need to
                                       jump over the "else" so that it
                                       doesn't get executed.
                                    */
                                    openLabels.Push(generateLabel());
                                    program.Add(new Instruction("", "Jmp " + openLabels.Peek()));
                                    program.Add(startOfElse);
                                .)
      [ "else"
        Stat
      ]                         (.  program.Add(new Instruction(openLabels.Pop(), "Nop")); .)
      
| "for"                        
  '(' InitialLoopAction                   
                                (.  string loopStartLabel = generateLabel(); // generate label here, after initial loop action and before update action
                                    openLabels.Push(generateLabel()); //second label is for the loop end
                                    program.Add(new Instruction(loopStartLabel, "Nop"));
                                .)     
  UpdateLoopAction Expr<out type> ')'        
                                (.
                                    if ((TastierType)type != TastierType.Boolean) {
                                      SemErr("boolean type expected");
                                    }
                                    program.Add(new Instruction("", "FJmp " + openLabels.Peek())); // jump to the loop end label if condition is false
                                .)
      Stat                      (.  
                                    // Add the update action operations after the statement, prior to jumping back to the top of the loop.
                                    // Using the updateOps list to handle nested for loops.
                                    if (updateOps.Count != 0){
                                      int listCount = updateOps.Count; 
                                      program.AddRange(updateOps[listCount-1]);
                                      updateOps.RemoveAt(listCount-1);
                                    }
                                    program.Add(new Instruction("", "Jmp " + loopStartLabel));
                                    program.Add(new Instruction(openLabels.Pop(), "Nop")); // put the loop end label here
                                .)

| "while"                       (.  string loopStartLabel = generateLabel();
                                    openLabels.Push(generateLabel()); //second label is for the loop end
                                    program.Add(new Instruction(loopStartLabel, "Nop"));
                                .)
  '(' Expr<out type> ')'        (.
                                    if ((TastierType)type != TastierType.Boolean) {
                                      SemErr("boolean type expected");
                                    }
                                    program.Add(new Instruction("", "FJmp " + openLabels.Peek())); // jump to the loop end label if condition is false
                                .)
      Stat                      (.  program.Add(new Instruction("", "Jmp " + loopStartLabel));
                                    program.Add(new Instruction(openLabels.Pop(), "Nop")); // put the loop end label here
                                .)

| "read"
  Ident<out name> ';'           (.
                                    sym = lookup(openScopes, name);
                                    if (sym == null) {
                                      sym = _lookup(externalDeclarations, name);
                                      isExternal = true;
                                    }
                                    if (sym == null) {
                                      SemErr("reference to undefined variable " + name);
                                    }

                                    if ((sym.Item2 != (int)TastierKind.Var) && (sym.Item2 != (int)TastierKind.Constant)) {
                                      SemErr("variable/constant type expected but " + sym.Item1 + " has kind " + (TastierType)sym.Item2);
                                    }

                                    if (sym.Item3 != (int)TastierType.Integer) {
                                      SemErr("integer type expected but " + sym.Item1 + " has type " + (TastierType)sym.Item2);
                                    }
                                    program.Add(new Instruction("", "Read"));

                                    if (sym.Item4 == 0) {
                                      if (isExternal) {
                                        program.Add(new Instruction("", "StoG " + sym.Item1));
                                        // if the symbol is external, we also store it by name. The linker will resolve the name to an address.
                                      } else {
                                        program.Add(new Instruction("", "StoG " + (sym.Item5+3)));
                                      }
                                    }
                                    else {
                                      int lexicalLevelDifference = Math.Abs(openScopes.Count - sym.Item4)-1;
                                      program.Add(new Instruction("", "Sto " + lexicalLevelDifference + " " + sym.Item5));
                                    }
                                .)

| "write"
  Expr<out type>                (.
                                    if (type != TastierType.Integer && type != TastierType.String) {
                                      SemErr("integer/string type expected");
                                    }
                                    if (type == TastierType.String)
                                    {
                                        program.Add(new Instruction("", "StringPrint"));
                                    }
                                    else
                                    {
                                        program.Add(new Instruction("", "Write"));
                                    }
                                .)
  {',' Expr<out type> 
                                (.
                                    if (type != TastierType.Integer && type != TastierType.String) {
                                      SemErr("integer/string type expected");
                                    }
                                    if (type == TastierType.String)
                                    {
                                        program.Add(new Instruction("", "StringPrint"));
                                    }
                                    else
                                    {
                                        program.Add(new Instruction("", "Write"));
                                    }
                                .)}
  ';'

| '{' { Stat | ConstDecl<external> | VarDecl<external> | StructInst}'}'.

/*------------------------------------------------------------------------*/

Tastier                         (.  string name; bool external = false; .)
= "program"
  Ident<out name>               (.
                                    openScopes.Push(new Scope());
                                .)
  '{' 
  { NewStruct | ConstDecl<external> | VarDecl<external> | ProcDecl | ExternDecl }
  '}'                           (.
                                    if (openScopes.Peek().Count == 0) {
                                      Warn("Warning: Program " + name + " is empty ");
                                    }

                                    header.Add(new Instruction("", ".names " + (externalDeclarations.Count + openScopes.Peek().Count)));
                                    foreach (Symbol s in openScopes.Peek()) {
                                      if (s.Item2 == (int)TastierKind.Var) {
                                        header.Add(new Instruction("", ".var " + ((int)s.Item3) + " " + s.Item1));
                                      } else if (s.Item2 == (int)TastierKind.Proc) {
                                        header.Add(new Instruction("", ".proc " + s.Item1));
                                      } else if (s.Item2 == (int)TastierKind.Constant) {
                                        header.Add(new Instruction("", ".const " + ((int)s.Item3) + " " + s.Item1));
                                      } else if (s.Item2 == (int)TastierKind.Array) {
                                        header.Add(new Instruction("", ".const " + ((int)s.Item3) + " " + s.Item1));
                                      } else {
                                        SemErr("global item " + s.Item1 + " has no defined type");
                                      }
                                    }
                                    foreach (Symbol s in externalDeclarations) {
                                      if (s.Item2 == (int)TastierKind.Var) {
                                        header.Add(new Instruction("", ".external var " + ((int)s.Item3) + " " + s.Item1));
                                      } else if (s.Item2 == (int)TastierKind.Proc) {
                                        header.Add(new Instruction("", ".external proc " + s.Item1));
                                      } else if (s.Item2 == (int)TastierKind.Constant) {
                                        header.Add(new Instruction("", ".external const " + ((int)s.Item3) + " " + s.Item1));
                                      } else if (s.Item2 == (int)TastierKind.Array) {
                                        header.Add(new Instruction("", ".const " + ((int)s.Item3) + " " + s.Item1));
                                      } else {
                                        SemErr("external item " + s.Item1 + " has no defined type");
                                      }
                                    }
                                    header.AddRange(program);
                                    openScopes.Pop();
                                .).

/*------------------------------------------------------------------------*/

Term<out TastierType type>      (.  TastierType type1; Instruction inst; .)
= Factor<out type>
  { MulOp<out inst>
    Factor<out type1>           (.
                                    if (type != TastierType.Integer ||
                                        type1 != TastierType.Integer) {
                                      SemErr("integer type expected");
                                    }
                                    program.Add(inst);
                                .)
  }.

/*------------------------------------------------------------------------*/

Type<out TastierType type>
=                               (.  type = TastierType.Undefined; .)
 ( "int"                        (.  type = TastierType.Integer; .)
 | "bool"                       (.  type = TastierType.Boolean; .)
 | "string"                     (.  type = TastierType.String; .)
 ).

/*------------------------------------------------------------------------*/

// Creation of struct.
NewStruct                       (. Symbol sym; string name; string name1; TastierType type; List<Symbol> attr = new List<Symbol>(); List<int> dims = new List<int>(); .)
= "struct"
  Ident<out name>               
  '{'
  Type<out type>
  Ident<out name1>              (. sym = new Symbol(name1, (int)TastierKind.Var, (int)type, 0, 0); .)
  ['[' number                   (. sym = new Symbol(name1, (int)TastierKind.Array, (int)type, 0, structArrays); 
                                   dims.Add(Convert.ToInt32(t.val)); 
                                   structArrays++;
                                .)
   ']'
      {'[' number               (. dims.Add(Convert.ToInt32(t.val)); .)']'}    
                                (. arrayDict.Add(sym.Item5, dims); .)]
  ';'                           (. attr.Add(sym); .)
      
  {Type<out type>
   Ident<out name1>             (. sym = new Symbol(name1, (int)TastierKind.Var, (int)type, 0, 0); .)
   ['[' number                  (. sym = new Symbol(name1, (int)TastierKind.Array, (int)type, 0, structArrays); 
                                   dims.Add(Convert.ToInt32(t.val));
                                   structArrays++;
                                .)
    ']'
      {'[' number               (. dims.Add(Convert.ToInt32(t.val)); .)']'}
                                (. arrayDict.Add(sym.Item5, dims); .)]
  ';'                           (. attr.Add(sym); .)}
  '}'                           (. structDict.Add(name, attr);
                                .)';'. 

/*------------------------------------------------------------------------*/

// New instance of created struct.
StructInst                      (. int temp = 0; int i = 0; string name; string name1; string name2; Symbol sym; Symbol sym1; TastierType type;
                                   Scope currentScope = openScopes.Peek(); List<Symbol> attr = new List<Symbol>(); .)
= "new"
  Ident<out name>               (. if (!structDict.TryGetValue(name, out attr)) 
                                   {
                                     SemErr("Struct: "+name+" does not exist");
                                   }  
                                   arraySto = true;                            
                                .)
  Ident<out name1>
  ":="
  
  Ident<out name2>              (. sym = (new Symbol(name1, (int)TastierKind.Struct, (int)TastierType.Undefined, 0, globalCount));
                                   structInstDict[sym.Item5] = attr;
                                   program.Add(new Instruction("", "Const " + stringOffset));
                                   program.Add(new Instruction("", "StoG " + (sym.Item5+3))); 
                                   globalCount++;
                                   if (name2 != name)
                                   {
                                     SemErr("Object mismatch");
                                   } 
                                   else // push new symbol
                                   {
                                     currentScope.Push(sym);
                                     temp = stringOffset;
                                     stringOffset = stringOffset - attr.Count;
                                   }
                                .)
  '('
  ( Expr<out type>              (. program.Add(new Instruction("", "StoG " + temp));
                                   sym1 = lookup(openScopes, (t.val));
                                   if (sym1 != null)
                                   {
                                     if(sym1.Item2 == (int)TastierKind.Array)
                                     {
                                        List<Symbol> newSyms = new List<Symbol>();
                                        newSyms.AddRange(attr);
                                        Symbol newSym = new Symbol(attr[i].Item1, sym1.Item2, sym1.Item3, sym1.Item4, sym1.Item5);
                                        newSyms[i] = newSym;
                                        structInstDict[sym.Item5] = newSyms;
                                     }
                                   } 
                                .)
   |(. program.Add(new Instruction("", "Const " + temp)); .)
    Str<sym, out type>                           
  )                             
  { ','                         (. temp--; i++; .)
    ( Expr<out type>            (. program.Add(new Instruction("", "StoG " + temp)); 
                                   sym1 = lookup(openScopes, (t.val));
                                   if (sym1 != null)
                                   {
                                     if(sym1.Item2 == (int)TastierKind.Array)
                                     {
                                        List<Symbol> newSyms = new List<Symbol>();
                                        newSyms.AddRange(structInstDict[sym.Item5]);
                                        Symbol newSym = new Symbol(attr[i].Item1, sym1.Item2, sym1.Item3, sym1.Item4, sym1.Item5);
                                        newSyms[i] = newSym;
                                        structInstDict[sym.Item5] = newSyms;
                                     }
                                   } 
                                .)
     |(. program.Add(new Instruction("", "Const " + temp)); .)
     Str<sym, out type>  
    )                       
  }')'
  ';'                           (. if (i != (attr.Count-1)) 
                                   {
                                     SemErr("Incorrect number of attributes for object instantiation");
                                   }
                                   arraySto = false;
                                .).
  

/*------------------------------------------------------------------------*/

ConstDecl<bool external>        (.
                                    string name; Symbol sym; TastierType type; TastierType etype; Scope currentScope = openScopes.Peek();
                                .)
= "const"
  Type<out type>
  Ident<out name>               (.
                                    if (external) {
                                      Console.WriteLine("External Constant '" + name + "' of type: " + type);
                                      externalDeclarations.Push(new Symbol(name, (int)TastierKind.Constant, (int)type, 0, 0));
                                    } else {
                                      if ((openScopes.Count-1) > 0)
                                      {
                                        SemErr("constants must be declared in global scope");
                                      }
                                      else
                                      {
                                        Console.WriteLine("Global Constant '" + name + "' of type: " + type + ", stack-frame-pointer: " + (openScopes.Count-1) +
                                        ", and address: " + currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array)) + ".");
                                        currentScope.Push(new Symbol(name, (int)TastierKind.Constant, (int)type, openScopes.Count-1, currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array))));
                                        globalCount++;
                                      }
                                    }
                                .) 
  ":="
  (|Expr<out etype>   
                                (.
                                    sym = lookup(openScopes, name);
                                    if (etype != type) {
                                      SemErr("incompatible types");
                                    }
                                    if ((openScopes.Count-1) == 0) {
                                      if (external) {
                                        program.Add(new Instruction("", "StoG " + name));
                                        // if the symbol is external, we also store it by name. The linker will resolve the name to an address.
                                      } else {
                                        int addr = sym.Item5 + 3;
                                        program.Add(new Instruction("", "StoG " + addr));
                                      }
                                    }
                                    else {
                                        SemErr("Constants must be in global scope");
                                    }
                                .)
  | Str<lookup(openScopes, name), out type>                        
                                 )        
  ';'.
  
/*------------------------------------------------------------------------*/

VarDecl<bool external>          (.
                                    int n; int resmem; string name; Symbol sym; List<int> dList = new List<int>(); TastierType type; TastierKind kind; Scope currentScope = openScopes.Peek();
                                .)
= Type<out type>                (.
                                  kind = TastierKind.Var;
                                .)
  Ident<out name>               
  ['['number                    (.  
                                    kind = TastierKind.Array;
                                    n = Convert.ToInt32(t.val);
                                    dList.Add(n);
                                .)']'
  {'['number                    (.
                                    n = Convert.ToInt32(t.val);
                                    dList.Add(n);
                                .)']'}]                             
                                (.
                                  if (kind == TastierKind.Var) {
                                    if (external) {
                                      Console.WriteLine("External VAR '" + name + "' of type: " + type);
                                      externalDeclarations.Push(new Symbol(name, (int)TastierKind.Var, (int)type, 0, 0));
                                    } else {
                                      if((openScopes.Count-1) > 0)
                                      {
                                        Console.WriteLine("Local VAR '" + name + "' of type: " + type + ", stack-frame-pointer: " + (openScopes.Count-1) +
                                        ", and address: " + currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array)) + ".");
                                      }
                                      if (((openScopes.Count-1) > 0) && (type != TastierType.String))
                                      {                                       
                                        currentScope.Push(new Symbol(name, (int)TastierKind.Var, (int)type, openScopes.Count-1, ( currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array)))));
                                      }
                                      else
                                      {
                                        if((openScopes.Count-1) == 0)
                                        {
                                          Console.WriteLine("Global VAR '" + name + "' of type: " + type + ", stack-frame-pointer: " + (openScopes.Count-1) +
                                          ", and address: " + currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array)) + ".");
                                          currentScope.Push(new Symbol(name, (int)TastierKind.Var, (int)type, openScopes.Count-1, globalCount));
                                          globalCount++;
                                        }
                                        else
                                        {
                                          sym = (new Symbol(name, (int)TastierKind.Var, (int)type, openScopes.Count-1, globalCount));
                                          currentScope.Push(sym);
                                          globalCount++;
                                        }
                                      }
                                    }
                                  }
                                  else {
                                    sym = (new Symbol(name, (int)TastierKind.Array, (int)type, 0, globalCount));
                                    program.Add(new Instruction("", "Const " + stringOffset));
                                    program.Add(new Instruction("", "StoG " + (globalCount+3)));
                                    currentScope.Push(sym);
                                    arrayDict.Add(globalCount, dList);
                                    resmem = 1;
                                    for (int i = 0; i < dList.Count; i++)
                                    {
                                      resmem = resmem * dList[i];
                                    } 
                                    stringOffset = stringOffset - (resmem + 1);
                                    globalCount++;
                                  }
                                .)
  { ',' Ident<out name>         (.
                                  if (kind == TastierKind.Var) { 
                                    if (external) {
                                      Console.WriteLine("External VAR '" + name + "' of type: " + type);
                                      externalDeclarations.Push(new Symbol(name, (int)TastierKind.Var, (int)type, 0, 0));
                                    } else {
                                      if((openScopes.Count-1) > 0)
                                      {
                                        Console.WriteLine("Local VAR '" + name + "' of type: " + type + ", stack-frame-pointer: " + (openScopes.Count-1) +
                                        ", and address: " + currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array)) + ".");
                                      }
                                      if (((openScopes.Count-1) > 0) && (type != TastierType.String))
                                      {                                       
                                        currentScope.Push(new Symbol(name, (int)TastierKind.Var, (int)type, openScopes.Count-1, ( currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array)))));
                                      }
                                      else
                                      {
                                        if((openScopes.Count-1) == 0)
                                        {
                                          Console.WriteLine("Global VAR '" + name + "' of type: " + type + ", stack-frame-pointer: " + (openScopes.Count-1) +
                                          ", and address: " + currentScope.Count(s => (s.Item2 == (int)TastierKind.Var) || (s.Item2 == (int)TastierKind.Constant) || (s.Item2 == (int)TastierKind.Array)) + ".");
                                          currentScope.Push(new Symbol(name, (int)TastierKind.Var, (int)type, openScopes.Count-1, globalCount));
                                          globalCount++;
                                        }
                                        else
                                        {
                                          sym = (new Symbol(name, (int)kind, (int)type, openScopes.Count-1, globalCount));
                                          currentScope.Push(sym);
                                          globalCount++;
                                        }
                                      }
                                    }
                                   }
                                   else {
                                     SemErr("can't declare multiple arrays in-line");
                                   }                              
                                .)
  } ';'.

ExternDecl                      (.  string name; bool external = true; Scope currentScope = openScopes.Peek(); int count = currentScope.Count; .)
= "external"
  ( ConstDecl<external>
  | VarDecl<external>
  | "procedure" Ident<out name> ';'
                                (.  Console.WriteLine("External Process: " + name);  
                                    externalDeclarations.Push(new Symbol(name, (int)TastierKind.Proc, (int)TastierType.Undefined, 1, -1)); .)
  ) .

END Tastier.
